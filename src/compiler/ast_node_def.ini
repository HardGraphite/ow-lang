; Syntax:
;
; ```
; [NODE_NAME]
; base = BASE_NODE_NAME
; attr = TYPE1 NAME1 , TYPE2 NAME2 , ...
; ctor = "(constructor code)"
; dtor = "(destructor code)"
; ```
;
; - In NODE_NAME, prefix "." means an abstract node type.
; - In constructor and destructor code, $ATTR means accessing member ATTR.

[NilLiteral]

[BoolLiteral]
attr = _Bool value

[IntLiteral]
attr = int64_t value

[FloatLiteral]
attr = double value

[.StringLikeLiteral]
attr = struct ow_sharedstr *value
ctor = "$value = NULL;"
dtor = "if (ow_likely($value)) ow_sharedstr_unref($value);"

[SymbolLiteral]
base = .StringLikeLiteral

[StringLiteral]
base = .StringLikeLiteral

[Identifier]
base = .StringLikeLiteral

[.BinOpExpr]
attr = struct ow_ast_Expr *lhs, struct ow_ast_Expr *rhs
ctor = "$lhs = NULL, $rhs = NULL;"
dtor = "if (ow_likely($lhs)) ow_ast_node_del((struct ow_ast_node *)$lhs); if (ow_likely($rhs)) ow_ast_node_del((struct ow_ast_node *)$rhs);"

[AddExpr]
base = .BinOpExpr

[SubExpr]
base = .BinOpExpr

[MulExpr]
base = .BinOpExpr

[DivExpr]
base = .BinOpExpr

[RemExpr]
base = .BinOpExpr

[ShlExpr]
base = .BinOpExpr

[ShrExpr]
base = .BinOpExpr

[BitAndExpr]
base = .BinOpExpr

[BitOrExpr]
base = .BinOpExpr

[BitXorExpr]
base = .BinOpExpr

[EqlExpr]
base = .BinOpExpr

[AddEqlExpr]
base = .BinOpExpr

[SubEqlExpr]
base = .BinOpExpr

[MulEqlExpr]
base = .BinOpExpr

[DivEqlExpr]
base = .BinOpExpr

[RemEqlExpr]
base = .BinOpExpr

[ShlEqlExpr]
base = .BinOpExpr

[ShrEqlExpr]
base = .BinOpExpr

[BitAndEqlExpr]
base = .BinOpExpr

[BitOrEqlExpr]
base = .BinOpExpr

[BitXorEqlExpr]
base = .BinOpExpr

[EqExpr]
base = .BinOpExpr

[NeExpr]
base = .BinOpExpr

[LtExpr]
base = .BinOpExpr

[LeExpr]
base = .BinOpExpr

[GtExpr]
base = .BinOpExpr

[GeExpr]
base = .BinOpExpr

[AndExpr]
base = .BinOpExpr

[OrExpr]
base = .BinOpExpr

[AttrAccessExpr]
base = .BinOpExpr

[MethodUseExpr]
base = .BinOpExpr

[.UnOpExpr]
attr = struct ow_ast_Expr *val
ctor = "$val = NULL"
dtor = "if (ow_likely($val)) ow_ast_node_del((struct ow_ast_node *)$val);"

[PosExpr]
base = .UnOpExpr

[NegExpr]
base = .UnOpExpr

[BitNotExpr]
base = .UnOpExpr

[NotExpr]
base = .UnOpExpr

[.ArrayLikeExpr]
attr = struct ow_ast_node_array elems
ctor = "ow_ast_node_array_init(&$elems);"
dtor = "ow_ast_node_array_fini(&$elems);"

[TupleExpr]
base = .ArrayLikeExpr

[ArrayExpr]
base = .ArrayLikeExpr

[SetExpr]
base = .ArrayLikeExpr

[MapExpr]
attr = struct ow_ast_nodepair_array pairs
ctor = "ow_ast_nodepair_array_init(&$pairs);"
dtor = "ow_ast_nodepair_array_fini(&$pairs);"

[.CallLikeExpr]
attr = struct ow_ast_Expr *obj, struct ow_ast_node_array args
ctor = "$obj = NULL; ow_ast_node_array_init(&$args);"
dtor = "if (ow_likely($obj)) ow_ast_node_del((struct ow_ast_node *)$obj); ow_ast_node_array_fini(&$args);"

[CallExpr]
base = .CallLikeExpr

[SubscriptExpr]
base = .CallLikeExpr

[ExprStmt]
attr = struct ow_ast_Expr *expr
ctor = "$expr = NULL;"
dtor = "if (ow_likely($expr)) ow_ast_node_del((struct ow_ast_node *)$expr);"

[BlockStmt]
attr = struct ow_ast_node_array stmts
ctor = "ow_ast_node_array_init(&$stmts);"
dtor = "ow_ast_node_array_fini(&$stmts);"

[ReturnStmt]
attr = struct ow_ast_Expr *ret_val /*optional*/
ctor = "$ret_val = NULL;"
dtor = "if (ow_likely($ret_val)) ow_ast_node_del((struct ow_ast_node *)$ret_val);"

[MagicReturnStmt]
base = ReturnStmt

[IfElseStmt]
attr = struct ow_ast_nodepair_array branches /* {(Expr)cond, (BlockStmt)body} */, struct ow_ast_BlockStmt *else_branch
ctor = "ow_ast_nodepair_array_init(&$branches); $else_branch = NULL;"
dtor = "ow_ast_nodepair_array_fini(&$branches); if ($else_branch) ow_ast_node_del((struct ow_ast_node *)$else_branch);"

[ForStmt]
base = BlockStmt
attr = struct ow_ast_Identifier *var, struct ow_ast_Expr *iter
ctor = "$var = NULL; $iter = NULL;"
dtor = "if (ow_likely($var)) ow_ast_node_del((struct ow_ast_node *)$var); if (ow_likely($iter)) ow_ast_node_del((struct ow_ast_node *)$iter);"

[WhileStmt]
base = BlockStmt
attr = struct ow_ast_Expr *cond
ctor = "$cond = NULL;"
dtor = "if (ow_likely($cond)) ow_ast_node_del((struct ow_ast_node *)$cond);"

[FuncStmt]
base = BlockStmt
attr = struct ow_ast_Identifier *name, struct ow_ast_ArrayExpr *args /* (Identifier) */
ctor = "$name = NULL; $args = NULL;"
dtor = "if (ow_likely($name)) ow_ast_node_del((struct ow_ast_node *)$name); if (ow_likely($args)) ow_ast_node_del((struct ow_ast_node *)$args);"

[Module]
attr = struct ow_ast_BlockStmt *code
ctor = "$code = NULL;"
dtor = "if (ow_likely($code)) ow_ast_node_del((struct ow_ast_node *)$code);"
